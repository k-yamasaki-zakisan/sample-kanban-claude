name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-test.yml'

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: kanban_db_test
          POSTGRES_USER: kanban_user
          POSTGRES_PASSWORD: kanban_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: backend
      
    - name: Run unit tests
      run: |
        cd backend
        ./gradlew test --info
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/kanban_db_test
        SPRING_DATASOURCE_USERNAME: kanban_user
        SPRING_DATASOURCE_PASSWORD: kanban_password
        SPRING_PROFILES_ACTIVE: test

    - name: Run integration tests
      run: |
        cd backend
        ./gradlew integrationTest --info
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/kanban_db_test
        SPRING_DATASOURCE_USERNAME: kanban_user
        SPRING_DATASOURCE_PASSWORD: kanban_password
        SPRING_PROFILES_ACTIVE: test
      continue-on-error: true


    - name: Generate code coverage report
      run: |
        cd backend
        ./gradlew jacocoTestReport

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/build/test-results/
          backend/build/reports/tests/
          backend/build/reports/jacoco/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false